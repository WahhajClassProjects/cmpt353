Test Case ID: db_ut_10
Test Case Title: Valid Parent ID For Messages
Test Case Description: Test if assigning a parentID which will cause a cycle is rejected.
                        This is to ensure that the reply chain doesn't loop on itself and maintains a tree structure

Preconditions: 
- The database is running

Test Steps:
1. INSERT a new message -- channelID = 4, senderID = 1, timestamp = calculate in code, parentID = 0, thumbsUp = null, thumbsDown = null, body = "db_ut_10-Root Node"
2. INSERT a new message -- channelID = 4, senderID = 1, timestamp = calculate in code, parentID = id from step 1, thumbsUp = null, thumbsDown = null, body = "db_ut_10-Child Node 1"
3. Assert that the id and timestamp of the message from step 2 are both greater than the id and timestamp of the message from step 1
4. Get the largest message id in the messages table
5. INSERT a new message -- channelID = 4, senderID = 1, timestamp = calculate in code, parentID = id from step 4, thumbsUp = null, thumbsDown = null, body = "db_ut_10-FAILED-TEST-STEP 5"
6. Assert that the insertion in step 5 fail
7. INSERT a new message -- channelID = 4, senderID = 1, timestamp = calculate in code, parentID = id from step 4 + 1 , thumbsUp = null, thumbsDown = null, body = "db_ut_10-FAILED-TEST-STEP 7"
8. Assert that the insertion in step 7 fail

Expected Results:
- The message in step 2 should have higher id and timestamps and their insertion should go through
- The remaining inserts should fail

Postconditions:
- Two new messages have been added to channel 4

Notes: Developer and tester notes
- The reply chain should be a tree. If A is the root node of this tree and has a child node B, then in the database, this is represented as B's parentID = A.
  If A's parentID = B, then this will break the tree structure because there is now a cycle. This scenario should be prevented. It can be prevented if the following is true
  1. If message A is added to the database before B, then the both the id and timestamp of B should be larger than those of B
  2. If message A attempts to write a parent ID equal to or larger than its own ID, then this write should be rejected, as a message cannot be a reply to itself,
   		and it cannot be a reply to a message that doesn't yet exist
  3. Removing entries should not alter the next value of the AUTO_INCREMENT id i.e. the id values for deleted entries are not reused.
  		This is default behaviour, just have to make sure it isn't overridden.
  		Also, deletion from the database will not be implemented so this is not a cause of concern.
  4. Every message can at most have only one parent. This doesn't need to be checked as the database stores the parentID as a single integer
  5. Prevent editing of the channelID, senderID, timestamp, and parentID values after they have been added to the database. This requires a TRIGGER which as tested separately.
